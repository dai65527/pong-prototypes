/* tslint:disable */
/* eslint-disable */
/**
 * todo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    Item,
    ItemFromJSON,
    ItemToJSON,
} from '../models';

export interface DeleteItemItemIdRequest {
    itemId: string;
}

export interface GetItemItemIdRequest {
    itemId: string;
}

export interface PostItemRequest {
    body?: InlineObject1;
}

export interface PutItemRequest {
    body?: InlineObject;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * delete done items
     * delete done items
     */
    async deleteItemRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/item`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete done items
     * delete done items
     */
    async deleteItem(initOverrides?: RequestInit): Promise<object> {
        const response = await this.deleteItemRaw(initOverrides);
        return await response.value();
    }

    /**
     * delete a item
     */
    async deleteItemItemIdRaw(requestParameters: DeleteItemItemIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteItemItemId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/item/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a item
     */
    async deleteItemItemId(requestParameters: DeleteItemItemIdRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.deleteItemItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get all items
     * get all items
     */
    async getItemRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Item>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/item`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     * get all items
     * get all items
     */
    async getItem(initOverrides?: RequestInit): Promise<Array<Item>> {
        const response = await this.getItemRaw(initOverrides);
        return await response.value();
    }

    /**
     * get item data
     */
    async getItemItemIdRaw(requestParameters: GetItemItemIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemItemId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/item/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * get item data
     */
    async getItemItemId(requestParameters: GetItemItemIdRequest, initOverrides?: RequestInit): Promise<Item> {
        const response = await this.getItemItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * add a new item
     * add a item
     */
    async postItemRaw(requestParameters: PostItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Item>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * add a new item
     * add a item
     */
    async postItem(requestParameters: PostItemRequest, initOverrides?: RequestInit): Promise<Item> {
        const response = await this.postItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update a item
     * update a item
     */
    async putItemRaw(requestParameters: PutItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Item>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/item`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * update a item
     * update a item
     */
    async putItem(requestParameters: PutItemRequest, initOverrides?: RequestInit): Promise<Item> {
        const response = await this.putItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
